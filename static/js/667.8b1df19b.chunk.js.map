{"version":3,"file":"static/js/667.8b1df19b.chunk.js","mappings":"wMAGe,SAASA,EAAT,GAAiC,IAAXC,EAAU,EAAVA,OAC7BC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,8BACGF,IACC,wBACGA,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACV,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAM,CAAEP,SAAAA,IAA5C,SACGI,KAFID,EADC,OAWrB,C,sJCjBc,SAASK,IACtB,OAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA4BJ,EAAAA,EAAAA,UAAS,MAArC,eAAOV,EAAP,KAAee,EAAf,KACA,GAA8BL,EAAAA,EAAAA,WAAS,GAAvC,eAAOM,EAAP,KAAgBC,EAAhB,KACA,GAAkCP,EAAAA,EAAAA,WAAS,GAA3C,eAAOQ,EAAP,KAAkBC,EAAlB,KACA,GAA0BT,EAAAA,EAAAA,WAAS,GAAnC,eAAOU,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,WAAM,wCASd,kHAE8BC,EAAAA,EAAAA,IAAaV,GAF3C,mBAI2B,KAFfW,EAFZ,EAEYA,SAEIC,OAJhB,uBAKMR,GAAW,GALjB,0BASUjB,EAASwB,EAAQrB,KAAI,kBAAoB,CAAEC,GAAtB,EAAGA,GAAuBC,MAA1B,EAAOA,MAAP,IAC3BU,EAAUf,GAVd,kDAYI0B,QAAQC,IAAR,MACAN,GAAS,GAbb,yBAeIF,GAAa,GAfjB,8EATc,sBACA,KAAVN,IAIJI,GAAW,GACXE,GAAa,GACbJ,EAAU,MAPI,mCA2Bda,GACD,GAAE,CAACf,IAkBJ,OACE,iCACE,kBAAMgB,SAdY,SAAAC,GACpBA,EAAEC,iBACF,IAAMC,EAAuBrB,EAAWsB,OAEX,KAAzBD,IAIJlB,EAASkB,GACTpB,EAAc,IACf,EAIG,WACE,kBACEsB,KAAK,OACLC,MAAOxB,EACPyB,SAtBc,SAAAN,GACpBlB,EAAckB,EAAEO,OAAOF,MACxB,EAqBOG,WAAS,KAEX,mBAAQJ,KAAK,SAAb,uBAGDhB,IAAa,uCAEZF,IAAW,kDAA0BH,EAA1B,OAEZb,IAAU,SAAC,IAAD,CAAYA,OAAQA,IAE9BoB,IAAS,iFAGf,C","sources":["components/MoviesList/MoviesList.jsx","pages/MoviesPage/MoviesPage.jsx"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport default function MoviesList({ movies }) {\n  const location = useLocation();\n\n  return (\n    <>\n      {movies && (\n        <ul>\n          {movies.map(({ id, title }) => (\n            <li key={id}>\n              <Link to={`/movies/${id}`} state={{ from: { location } }}>\n                {title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n}\n\nMoviesList.propTypes = PropTypes.arrayOf(\n  PropTypes.objectOf(PropTypes.string.isRequired).isRequired\n).isRequired;\n","import { useEffect, useState } from 'react';\nimport { searchMovies } from '../../service/Api-service';\nimport MoviesList from '../../components/MoviesList/MoviesList';\n\nexport default function MoviesPage() {\n  const [inputValue, setInputValue] = useState('');\n  const [query, setQuery] = useState('');\n  const [movies, setMovies] = useState(null);\n  const [isMovie, setIsMovie] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n\n    setIsMovie(true);\n    setIsLoading(true);\n    setMovies(null);\n\n    async function fetchMovies() {\n      try {\n        const { results } = await searchMovies(query);\n\n        if (results.length === 0) {\n          setIsMovie(false);\n          return;\n        }\n\n        const movies = results.map(({ id, title }) => ({ id, title }));\n        setMovies(movies);\n      } catch (error) {\n        console.log(error);\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchMovies();\n  }, [query]);\n\n  const onInputChange = e => {\n    setInputValue(e.target.value);\n  };\n\n  const handlerSubmit = e => {\n    e.preventDefault();\n    const normalizedInputValue = inputValue.trim();\n\n    if (normalizedInputValue === '') {\n      return;\n    }\n\n    setQuery(normalizedInputValue);\n    setInputValue('');\n  };\n\n  return (\n    <>\n      <form onSubmit={handlerSubmit}>\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={onInputChange}\n          autoFocus\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n\n      {isLoading && <p>Loading...</p>}\n\n      {!isMovie && <p>No results found for \"{query}\"</p>}\n\n      {movies && <MoviesList movies={movies} />}\n\n      {error && <p>Oops, something went wrong. Please, reload the page</p>}\n    </>\n  );\n}\n"],"names":["MoviesList","movies","location","useLocation","map","id","title","to","state","from","MoviesPage","useState","inputValue","setInputValue","query","setQuery","setMovies","isMovie","setIsMovie","isLoading","setIsLoading","error","setError","useEffect","searchMovies","results","length","console","log","fetchMovies","onSubmit","e","preventDefault","normalizedInputValue","trim","type","value","onChange","target","autoFocus"],"sourceRoot":""}